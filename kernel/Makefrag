# -*- makefile-gmake -*-

OBJS = \
	acpi.o \
	acpidbg.o \
	acpiosl.o \
	bio.o \
	cga.o \
	cmdline.o \
	condvar.o \
	console.o \
	kcpprt.o \
	e1000.o \
	ahci.o \
	exec.o \
	file.o \
	fmt.o \
	fs.o \
	futex.o \
	idle.o \
	ioapic.o \
	hotpatch.o \
	hwvm.o \
	kalloc.o \
	kmalloc.o \
	kbd.o \
	main.o \
	memide.o \
	ide.o \
	mp.o \
	net.o \
	pci.o \
	picirq.o \
	pipe.o \
	proc.o \
	gc.o \
	refcache.o \
	rnd.o \
	sampler.o \
	sched.o \
	spinlock.o \
	swtch.o \
	string.o \
	sysattack.o \
	syscall.o \
	sysfile.o \
	sysproc.o \
	syssocket.o\
	uart.o \
	user.o \
	vm.o \
	trap.o \
	uaccess.o \
	trapasm.o \
	xapic.o \
	x2apic.o \
	incbin.o \
	sysvectors.o \
	pstream.o \
	semaphore.o \
	buddy.o \
	ipi.o \
	dev.o \
	codex.o \
	benchcodex.o \
	iommu.o \
	rtc.o \
	mnode.o \
	mfs.o \
	mfsload.o \
	hpet.o \
	cpuid.o \
	unixsock.o \
	heapprof.o \
	eager_refcache.o \
	disk.o \
	multiboot.o \
	vga.o \
	partition.o \
	vfs.o \
	vfsadapt.o \
	vfsnull.o \
	vfsmount.o \
	fat32/fat32_alloc_table.o \
	fat32/fat32_cluster_cache.o \
	fat32/fat32_dirent.o \
	fat32/fat32_filesystem.o \
	fat32/fat32_header.o \
	fat32/fat32_vnode.o \
	sharedmem.o \
	uefi.o \
	retpoline.o \

OBJS := $(addprefix $(O)/kernel/, $(OBJS))

UNAME := $(shell uname)
ifeq ($(UNAME), Darwin)
DDSTATUS :=
else
DDSTATUS := status=none
endif

LDEPS += $(O)/libunwind.a $(O)/libcxxabi.a $(O)/compiler-rt.a $(O)/libcxx.a \
		$(O)/liblwip.a $(O)/libzlib.a $(O)/libacpica.a

$(O)/kernel.elf: tools/kmeta.py $(O)/kernel/boot.o $(OBJS) $(LDEPS) kernel/kernel.ld
	@echo "  LD     $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(LD) $(LDFLAGS) -T kernel/kernel.ld -z max-page-size=4096 -e efi_main \
		-o $@.tmp $(O)/kernel/boot.o $(OBJS) $(LDEPS) -L$(O)
	$(Q)$(NM) $@.tmp > $(O)/kernel/kernel.nm
	$(Q)$(OBJDUMP) -d $@.tmp > $(O)/kernel/kernel.objdump
	$(Q)$(OBJCOPY) --dump-section .kmeta=$(O)/kernel/kmeta.bin $@.tmp
	$(Q)tools/kmeta.py $(O)/kernel/kernel.nm $(O)/kernel/kernel.objdump \
		"$$(date)" "$$(git describe --all --long --dirty=+)" \
		| dd $(DDSTATUS) conv=notrunc of=$(O)/kernel/kmeta.bin
	$(Q)$(OBJCOPY) --update-section .kmeta=$(O)/kernel/kmeta.bin $@.tmp
	$(Q)mv $@.tmp $@
$(O)/kernel-stripped.elf: $(O)/kernel.elf
	@echo "  STRIP  $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(STRIP) -o $@ $<

$(O)/kernel/incbin.o: ASFLAGS+=-DMAKE_OUT=$(O)
$(O)/kernel/incbin.o: $(O)/kernel/initcode $(O)/kernel/bootother $(O)/fs.part.gz
$(O)/kernel/swtch.o: $(O)/include/asmdefines.h
$(O)/kernel/trapasm.o: $(O)/include/asmdefines.h
$(O)/kernel/uaccess.o: $(O)/include/asmdefines.h

# link initcode against sysstubs to get syscall numbers
$(O)/kernel/initcode: kernel/initcode.S $(O)/lib/sysstubs.o
	@echo "  CC     $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(CC) $(CFLAGS) -nostdinc -I. -c $< -o $@.o
	$(Q)$(LD) $(LDFLAGS) -N -e start -Ttext 0x1000 -o $@.out $@.o $(O)/lib/sysstubs.o
	$(Q)$(OBJCOPY) -S -O binary $@.out $@

$(O)/kernel/bootother: kernel/bootother.S
	@echo "  CC     $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(CC) $(CFLAGS) -nostdinc -I. -c $< -o $@.o
	$(Q)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7000 -o $@.out $@.o
	$(Q)$(OBJCOPY) -S -O binary $@.out $@

$(O)/include/asmdefines.h: kernel/asmdefines.cc
	@echo "  GEN    $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(CXX) -S $(CXXFLAGS) -o $@.tmp $<
	$(Q)sed -i -n 's/remove\$$//p' $@.tmp
	$(Q)mv $@.tmp $@

$(O)/kernel/sysvectors.cc: tools/syscalls.py kernel/*.cc
	$(call SYSCALLGEN,--kvectors)

$(O)/lib/sysstubs.o: $(O)/lib/sysstubs.S
	@echo "  CC     $@"
	$(Q)mkdir -p $(@D)
	$(Q)$(CC) $(ASFLAGS) -c -o $@ $<

.PRECIOUS: $(O)/kernel/%.o
-include $(O)/kernel/*.d
-include $(O)/kernel/fat32/*.d

# vim: set noexpandtab:
